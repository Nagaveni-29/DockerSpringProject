pipeline{
    agent any
    tools{
        maven 'm1'
    }
    stages{
        stage('test'){
        
            steps{
                sh 'mvn clean test'
            }
        }
        stage('install'){
            steps{
                sh 'mvn clean install -D skipTests=true'
		
            }
        }
	stage('sonar'){
		steps{
			withSonarQubeEnv('sonar'){
			sh 'mvn clean install sonar:sonar'
			}
			}
		}

	stage("jfrog"){
            steps{
                rtUpload(
                    serverId: 'jfrog',
                    spec: '''{
                        "files": [
                            {
                                "pattern": "**/**/*.*ar",
                                "target": "project/"
                            }
                        ]
                    }'''
                )
            }
        }
	  stage("Clone repository") {
                                steps{
		   git credentialsId: 'git', url: 'https://github.com/Nagaveni-29/DockerSpringProject/blob/main/backend/Dockerfile'
                   git credentialsId: 'git', url: 'https://github.com/Nagaveni-29/DockerSpringProject/tree/main/frontend/Dockerfile'
                               }
                        }
        stage("Build image") {
    steps{
	scripts{
        dockerImageFrontend = docker.build("nagavenidoddamani/frontend:latest", "https://github.com/Nagaveni-29/DockerSpringProject/blob/main/backend/Dockerfile")
        dockerImageBackend = docker.build("nagavenidoddamani/backend:latest", "https://github.com/Nagaveni-29/DockerSpringProject/blob/main/frontend/Dockerfile")
    }
	}
}
        stage("Push image"){
    steps{
	scripts{
        withDockerRegistry([ credentialsId: "dockerhubaccount", url: "https://hub.docker.com/u/nagavenidoddamani" ]) {
            dockerImageFrontend.push()
            dockerImageBackend.push()
        }
}
    }
}
    }
}

